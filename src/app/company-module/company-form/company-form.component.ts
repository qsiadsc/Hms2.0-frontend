import { Component, OnInit, Input, Output, EventEmitter, HostListener } from '@angular/core';
import { FormBuilder, FormGroup, Validators, FormArray, FormControl } from '@angular/forms';
import { Router, ActivatedRoute } from '@angular/router';
import { TextMaskModule } from 'angular2-text-mask';
import { CustomValidators } from '../../common-module/shared-services/validators/custom-validator.directive';
import { CommonDatePickerOptions } from '../../common-module/Constants';
import { ChangeDateFormatService } from '../../common-module/shared-services/change-date-format.service'; // Import date format method from common service
import { IMyInputFocusBlur } from 'mydatepicker';
import { HmsDataServiceService } from '../../common-module/shared-services/hms-data-api/hms-data-service.service'
import { CompanyApi } from '../company-api';
import { DatatableService } from '../../common-module/shared-services/datatable.service'
import { QueryList, ViewChildren } from '@angular/core';
import { DataTableDirective } from 'angular-datatables';
import { CompanyService } from '../company.service';
import { CurrentUserService } from '../../common-module/shared-services/hms-data-api/current-user.service'; //  contain all metaData 
import { ToastrService } from 'ngx-toastr'; //add toster service;
import { TranslateService } from '@ngx-translate/core';
import { Observable } from 'rxjs/Observable';
import { Constants } from '../../common-module/Constants';
import { CompleterCmp, CompleterData, CompleterService, CompleterItem, RemoteData } from 'ng2-completer';

@Component({
  selector: 'app-company-form',
  templateUrl: './company-form.component.html',
  styleUrls: ['./company-form.component.css'],
  providers: [ChangeDateFormatService, DatatableService, TranslateService]
})
export class CompanyFormComponent implements OnInit {
  businessTypeCd: any;
  bankAccountCheckForQuikcard: boolean = true
  showHideBusinessTypeDropDown: boolean = false;
  currentUser: any;
  disableBsnsType: boolean;
  ObservableSuspendedCompanyObj;
  checkSuspendedCompany = true
  suspended_company_columns = [];
  ObservableSuspendedHistoryCompanyObj;
  checkSuspendedHistoryCompany = true
  suspended_History_company_columns = [];
  coSuspendId: any;
  resumeTrue: boolean = false;
  error: { isError: boolean; errorMessage: string; };
  suspendDisableDate: any;
  //Date Picker Options
  myDatePickerOptions = CommonDatePickerOptions.myDatePickerOptions;
  phoneMask = CustomValidators.phoneMaskV1; // add phone format to phone field
  @Input() companySetupForm: FormGroup;
  @Input() companyFormEditMode: any;
  @Input() _checkIfEdit: any;
  @Input() financialFormAddMode: any;
  @Input() companyId: any;
  @Input() isTerminated: any;
  @Input() addCompany
  @Input() mainCompanyArray = [];
  @Output() selectedBusinessTypeKey = new EventEmitter();
  companySuspendedForm: FormGroup;
  check: boolean = false;
  setFocusCheck = true;
  addMode; //Enable true when user add a new company
  viewMode; //Enable true after a new company added
  editMode; //Enable true after viewMode when user clicks edit button
  private compDetail: any = {};
  chooseList: string[];
  businessTypeList = [];
  terminationCategoryList = [];
  isCompanyTerminated: string;
  companyKey;
  hiddenParamName;
  addNewSuspendUrl
  suspendTableID
  suspendTableActions
  suspendColumns
  suspendTableData
  suspendTableKeys
  suspendTableHeading
  /* account history popUp variable */
  dateNameArray = {}
  suspendedHistorytableData
  alberta: boolean = false
  hideSuspendedButton
  hideButton: any;
  businessTypeData: any;
  selectedBusinessTypeValue: any;
  setGeneralInfo // declare for solve errors of production-build
  public isOpen: boolean = false;
  unChecked: string = 'assets/images/uncheck.jpg'
  checked: string = 'assets/images/checked.jpg'
  isCompanySuspended: boolean;
  autoGeneratedNumber: any;
  observableObj: any;
  companyTerminRfInd: boolean = false;
  public onOpened(isOpen: boolean) {
    this.isOpen = isOpen;
  }
  @Output() compareEffectiveOnDate = new EventEmitter();
  @Input() isTerminationDate: any
  constructor(
    private changeDateFormatService: ChangeDateFormatService,
    private hmsDataServiceService: HmsDataServiceService,
    private _router: Router,
    private dataTableService: DatatableService,
    private companyService: CompanyService,
    public currentUserService: CurrentUserService,
    private toastr: ToastrService,
    private completerService: CompleterService,
    private translate: TranslateService
  ) {
    this.companyService.getbussinessType.emit(Constants.quikcardBusnsTypeKey);
    this.initialSuspendCompany()
    this.getTerminationCategory(); // get list of all Business Type
    companyService.setCompanyData.subscribe((value) => {
      if (value) {
        this.isCompanyTerminated = value.status;
        if (value.businessTypeCd == 'Q') {
          this.bankAccountCheckForQuikcard = true;
        } else {
          this.bankAccountCheckForQuikcard = false;
        }
        if (this.isCompanyTerminated == "Suspended") {
          this.isCompanySuspended = true;
        } else {
          this.isCompanySuspended = false;
        }
      }
    });
    companyService.hideButtons.subscribe((value) => {
      this.hideSuspendedButton = value.hideSuspendedButton;
    });
  }
  tableActions = []
  companyFormVal = {
    'company': new FormControl('', [Validators.required, CustomValidators.onlyNumbers, Validators.minLength(5), Validators.maxLength(5), CustomValidators.notEmpty]),
    'gracePeriod': new FormControl('60', [Validators.required, Validators.maxLength(3), CustomValidators.onlyNumbers, CustomValidators.range, CustomValidators.notEmpty]),//graceperiod pending
    'websiteAddress': new FormControl('', [Validators.maxLength(50), CustomValidators.notEmpty]),
    'companyName': new FormControl('', [Validators.required, Validators.maxLength(75), CustomValidators.notEmpty]),
    'effectiveOn': new FormControl('', [Validators.required]),
    'address1': new FormControl('', [Validators.required, Validators.maxLength(50), CustomValidators.alphaNumericWithSpecialChar, CustomValidators.notEmpty]),
    'address2': new FormControl('', [Validators.maxLength(50), CustomValidators.alphaNumericWithSpecialChar, CustomValidators.notEmpty]),
    'postalCode': new FormControl('', [Validators.required, Validators.maxLength(7), CustomValidators.alphaNumeric, CustomValidators.notEmpty]),
    'phone': new FormControl('', []),
    'extension': new FormControl('', [Validators.minLength(3), Validators.maxLength(5), CustomValidators.onlyNumbers]),
    'city': new FormControl('', [Validators.required, Validators.minLength(3), Validators.maxLength(60), CustomValidators.alphabetsWithApostrophe, CustomValidators.notEmpty]),
    'province': new FormControl('', [Validators.required, Validators.minLength(4), Validators.maxLength(60), CustomValidators.alphabetsWithApostrophe, CustomValidators.notEmpty]),
    'country': new FormControl('', [Validators.required, Validators.maxLength(60), CustomValidators.onlyAlphabets, CustomValidators.notEmpty]),
    'fax': new FormControl(''),
    'businessTypeKey': new FormControl(null, [Validators.required]),
    'terminationDate': new FormControl('', []),
    'terminationCategory': new FormControl('', []),
    'check': new FormControl(''),
    'coBankInfoInd': new FormControl(''),
    'autoGeneratedNumber': new FormControl(''),
    'coPrintCardInd': new FormControl('')
  }

  ngOnChanges(changes): void {
    if (changes['companyFormEditMode']) {
      document.getElementById("companyName").focus();
      this.companySetupForm.get('company').clearValidators();
    }
  }

  ngOnInit() {
    if (localStorage.getItem('isReload') == 'T') {
      this.currentUserService.getUserAuthorization().then(res => {
        this.currentUser = this.currentUserService.currentUser
        this.getBusinessType(); // get list of all Business Type
        localStorage.setItem('isReload', '')
      })
    } else {
      this.currentUserService.getUserAuthorization().then(res => {
        this.currentUser = this.currentUserService.currentUser
        this.getBusinessType(); // get list of all Business Type
      })
    }
    if (this._router.url == '/company/add') {
    } else {
      this.addMode = false;
      this.viewMode = true;
    }
    var self = this
    var tableActions = [
      { 'name': 'edit', 'class': 'table-action-btn edit-ico', 'icon_class': 'fa fa-pencil' },
    ]
    // save suspend Save
    var suspend_company_url = CompanyApi.getSuspendCompanyList;
    var suspendTableID = "suspend_company";
    var reqParam = [{ 'key': 'coKey', 'value': this.companyId }]
    this.ObservableSuspendedCompanyObj = Observable.interval(1000).subscribe(x => {
      if (this.checkSuspendedCompany = true) {
        if ('company.company-form.suspend-date' == this.translate.instant('company.company-form.suspend-date')) {
        }
        else {
          this.suspended_company_columns = [
            { title: this.translate.instant('company.company-form.suspend-date'), data: 'suspendOn' },
            { title: this.translate.instant('company.company-form.resume-date'), data: 'resumeOn' },
            { title: this.translate.instant('common.action'), data: 'coSuspendKey' }
          ];
          this.checkSuspendedCompany = false;
          this.ObservableSuspendedCompanyObj.unsubscribe();
        }
      }
    });
    //For suspend History
    var suspended_company_url = CompanyApi.getSuspendCompanyList;
    var suspendedTableId = "suspended_company"
    var reqParamSus = [{ 'key': 'coKey', 'value': this.companyId }]
    this.ObservableSuspendedHistoryCompanyObj = Observable.interval(1000).subscribe(x => {
      if (this.checkSuspendedHistoryCompany = true) {
        if ('company.company-form.suspend-date' == this.translate.instant('company.company-form.suspend-date')) {
        } else {
          this.suspended_History_company_columns = [
            { title: this.translate.instant('company.company-form.suspend-date'), data: 'suspendOn' },
            { title: this.translate.instant('company.company-form.resume-date'), data: 'resumeOn' },
          ]
          this.checkSuspendedHistoryCompany = false;
          this.ObservableSuspendedHistoryCompanyObj.unsubscribe();
        }
      }
    });

    if (this._router.url.indexOf('view') !== -1) {
      this.viewMode = true;
    }
    this.chooseList = ['', 'TPA', 'NIt', 'IIT', 'Seasia'];
    //Set Values of Form in view mode and disable all form fields
    if (this.viewMode) {
      this.companySetupForm.disable();
    }
    this.companySuspendedForm = new FormGroup({
      suspendOn: new FormControl('', Validators.required),
      resumeOn: new FormControl(''),
      coKey: new FormControl(this.companyId),
    });
    
    // termination date field in company view mode used to be destorted
    this.observableObj = Observable.interval(1000).subscribe(x => {
      $('#terminationDateDisabled .myDatePicker .mydp .selectiongroup').addClass('terminationDateFieldWidth')
      this.observableObj.unsubscribe()
    });
    // For termin checkbox added in company view page only
    this.companyService.companyViewTermin.subscribe( val => {
      if (val == 'T') {
        this.companyTerminRfInd = true
      }else {
        this.companyTerminRfInd = false
      }
    })
  }

  /* Get List of BusinessType */
  getBusinessType() {
    this.showHideBusinessTypeDropDown = this.currentUser.businessType.bothAccess;
    var businessType = this.currentUserService.userBusinnesType
    if (businessType.bothAccess && !this.viewMode) {
      this.selectedBusinessTypeValue = this.currentUserService.bothAcessdefaultBussinesType.businessTypeKey
      this.companySetupForm.patchValue({ 'businessTypeKey': this.currentUserService.bothAcessdefaultBussinesType.businessTypeDesc });
      this.selectedBusinessTypeKey.emit(this.currentUserService.bothAcessdefaultBussinesType.businessTypeKey);
      this.bankAccountCheckForQuikcard = true;
    }
    if (businessType.isQuikcard) {
      this.selectedBusinessTypeValue = businessType[0].businessTypeKey;
      this.companySetupForm.patchValue({ 'businessTypeKey': businessType[0].businessTypeKey });
      this.selectedBusinessTypeKey.emit(businessType[0].businessTypeKey);
      this.bankAccountCheckForQuikcard = true;
    } if (businessType.isAlberta) {
      this.selectedBusinessTypeValue = businessType[0].businessTypeKey;
      this.companySetupForm.patchValue({ 'businessTypeKey': businessType[0].businessTypeKey });
      this.selectedBusinessTypeKey.emit(businessType[0].businessTypeKey);
      this.bankAccountCheckForQuikcard = false;
    }
    //Predictive Company Search Upper
    this.businessTypeData = this.completerService.local(
      this.currentUser.businessType,
      "businessTypeDesc",
      "businessTypeDesc"
    );
  }

  onBusinessTypeSelected(selected: CompleterItem) {
    if (selected) {
      if (selected.originalObject.businessTypeCd == 'Q') {
        this.bankAccountCheckForQuikcard = true;
      } else {
        this.bankAccountCheckForQuikcard = false;
      }
      this.selectedBusinessTypeValue = selected.originalObject.businessTypeKey;
      this.getBussinessType(this.selectedBusinessTypeValue);
    }
    else {
      this.selectedBusinessTypeValue = '';
    }
    this.selectedBusinessTypeKey.emit(this.selectedBusinessTypeValue);
  }

  /* Get List of TerminationCategory */
  getTerminationCategory() {
    var URL = CompanyApi.getTerminationCategoryUrl;
    this.hmsDataServiceService.get(URL).subscribe(data => {
      this.terminationCategoryList = data.result;
    });
  }

  /**
   * @description : This Function is used to convert entered value to valid date format.
   * @params : "event" is datepicker value
   * @params : "frmControlName" is datepicker name/Form Control Name
   * For Reference : https://www.npmjs.com/package/angular4-datepicker
   * @return : None
   */
  changeDateFormat(event, frmControlName, formName, currentDate = false) {
    var datePickerValue = new Array();
    if (event.reason == 2 && currentDate == true && (event.value == null || event.value == '')) {
      var validDate = this.changeDateFormatService.getToday();
      var ControlName = frmControlName;
      datePickerValue[ControlName] = validDate;
    } else if (event.reason == 2 && event.value != null && event.value != '') {
      var obj = this.changeDateFormatService.changeDateFormat(event);
      var self = this
      if (obj == null) {
        self[formName].controls[frmControlName].setErrors({
          "dateNotValid": true
        });
        return;
      }
      var ControlName = frmControlName;
      var datePickerValue = new Array();
      datePickerValue[ControlName] = obj;
    }
    if (event.reason == 2) {
      if (formName == 'companySetupForm') {
        this.companySetupForm.patchValue(datePickerValue);
      } else if (formName == 'companySuspendedForm') {
        this.companySuspendedForm.patchValue(datePickerValue);
      }
    }
    if (event.reason == 2) {
      if (formName == 'companySetupForm') {
        if (this.companySetupForm.value.effectiveOn && this.companySetupForm.value.effectiveOn.date) {
          this.compareEffectiveOnDate.next(formName)
        }
      }
    }
  }

  /**
   * Change theme for according to business type 
   * @param val 
   */
  changeTheme(val) {
    if (val == 'alberta') {
      var head = document.getElementsByTagName('head')[0];
      var link = document.createElement('link');
      link.rel = 'stylesheet';
      link.type = 'text/css';
      link.href = '../../assets/css/common-alberta.css';
      link.media = 'all';
      head.appendChild(link);
    } else {
      $('link[rel=stylesheet][href~="../../assets/css/common-alberta.css"]').remove();
    }
  }

  /**
   * Check If company already exist
   * @param event 
   */
  isCompanyValid(event) {
    if (event.target.value) {
      let companyNumber = { coId: event.target.value };
      var URL = CompanyApi.isCompanyValidUrl;
      this.hmsDataServiceService.post(URL, companyNumber).subscribe(data => {
        if (data.result) {
          if (!this.editMode) {
            this.companySetupForm.controls['company'].setErrors({
              "companyAlreadyExist": true
            });
          }
        }
      });
    }
  }

  isWebsiteAddressValid(event) {
    if (event.target.value) {
    }
  }

  /**
   * Check Is Post Code Valid
   * @param event 
   */
  isCompanyPostalcodeValid(event) {
    if (event.target.value) {
      let postalNumber = { postalCd: event.target.value };
      var URL = CompanyApi.isCompanyPostalcodeValidUrl;
      var ProvinceVerifyURL = CompanyApi.isCompanyCityProvinceCountryValidUrl;
      this.hmsDataServiceService.post(URL, postalNumber).subscribe(data => {
        switch (data.code) {
          case 404:
            this.companySetupForm.controls['postalCode'].setErrors({
              "postalcodeNotFound": true
            });
            this.companySetupForm.patchValue({
              'city': '',
              'country': '',
              'province': ''
            });
            break;
          case 302:
            this.companySetupForm.patchValue({
              'city': data.result.cityName,
              'country': data.result.countryName,
              'province': data.result.provinceName
            });
            $('#company-form_extension').focus();
            break;
        }
      });
    }
  }

  /**
   * Get country province from post code
   * @param event 
   * @param fieldName 
   */
  isCompanyPostalVerifyValid(event, fieldName) {
    if (event.target.value) {
      let fieldParameter: object;
      let errorMessage: object;
      switch (fieldName) {
        case 'city':
          fieldParameter = {
            cityName: event.target.value,
            countryName: this.companySetupForm.get('country').value,
            provinceName: this.companySetupForm.get('province').value,
            postalCd: this.companySetupForm.get('postalCode').value,
          };
          errorMessage = { "cityValidate": true };
          break;
        case 'country':
          fieldParameter = {
            cityName: this.companySetupForm.get('city').value,
            countryName: event.target.value,
            provinceName: this.companySetupForm.get('province').value,
            postalCd: this.companySetupForm.get('postalCode').value,
          };
          errorMessage = { "countryValidate": true };
          break;
        case 'province':
          fieldParameter = {
            cityName: this.companySetupForm.get('city').value,
            countryName: this.companySetupForm.get('country').value,
            provinceName: event.target.value,
            postalCd: this.companySetupForm.get('postalCode').value,
          };
          errorMessage = { "provinceValidate": true };
          break;
      }
      var ProvinceVerifyURL = CompanyApi.isCompanyCityProvinceCountryValidUrl;
      this.hmsDataServiceService.post(ProvinceVerifyURL, fieldParameter).subscribe(data => {
        switch (data.code) {
          case 404:
            this.companySetupForm.controls[fieldName].setErrors(errorMessage);
            break;
          case 302:
            this.companySetupForm.patchValue({
              'city': data.result.cityName,
              'country': data.result.countryName,
              'province': data.result.provinceName
            });
            break;
        }
      });
    }
  }

  validateAllFormFields(formGroup: FormGroup) {
    Object.keys(formGroup.controls).forEach(field => {
      const control = formGroup.get(field);
      if (control instanceof FormControl) {
        control.markAsTouched({ onlySelf: true });
      } else if (control instanceof FormGroup) {
        this.validateAllFormFields(control);
      }
    });
  }

  /**
  * initiate Credit Limit
  * 
  */
  initialSuspendCompany() {
    this.suspendTableHeading = "Suspend History"
    this.addNewSuspendUrl = CompanyApi.saveCompanySuspendUrl;
    this.suspendColumns = [
      { title: this.translate.instant('company.company-form.suspend-date'), data: 'suspendOn' },
      { title: this.translate.instant('company.company-form.resume-date'), data: 'resumeOn' },
      { title: this.translate.instant('common.action'), data: 'action' }
    ]
    this.suspendTableData = []
    this.suspendTableID = "suspended-history-table"
    this.suspendTableKeys = [
      { 'column': 'suspendOn', 'type': 'text', 'name': 'suspendOn', 'required': true },
      { 'column': 'resumeOn', 'type': 'text', 'name': 'resumeOn', 'required': true },
      { 'column': 'action', 'type': 'action' }
    ]
    this.suspendTableActions = [
      { 'name': 'coKey', 'val': '', 'class': '', 'type': 'hidden' },
    ]
  }

  /*
   * Get Suspend History
   */
  getSuspendedHistory() {
    this.initialSuspendCompany();
    this.companyKey = this.companyId;
    this.hiddenParamName = 'coKey';
    let requestedData = {
      "coKey": this.companyId,
      "start": 0,
      "length": 5
    }
    var resdata = []
    this.companyId
    this.hmsDataServiceService.post(CompanyApi.getSuspendCompanyList, requestedData).subscribe(
      res => {
        if (res.code == 200 && res.status === "OK") {
          this.suspendTableData = res.result.data;
          resdata = [
            {
              'tableData': this.suspendTableData,
              'tableID': this.suspendTableID,
              'tableKeys': this.suspendTableKeys,
              'tableActions': this.suspendTableActions,
              'hasDeleteIcon': false,
              'saveUrl': this.addNewSuspendUrl,
              'tableColumns': this.suspendColumns
            }
          ]
        } else {
          var suspendTableData = [];
          resdata = [
            {
              'tableData': suspendTableData,
              'tableID': this.suspendTableID,
              'tableKeys': this.suspendTableKeys,
              'tableActions': this.suspendTableActions,
              'hasDeleteIcon': false,
              'saveUrl': this.addNewSuspendUrl,
              'tableColumns': this.suspendColumns
            }
          ]
        }
      }
    )
  }

  suspendHistoryDetails() {
    let requiredInfo = {
      "coKey": this.companyId
    }
    this.hmsDataServiceService.post(CompanyApi.getSuspendCompanyList, requiredInfo).subscribe(data => {
      if (data.code == 200 && data.status == "OK") {
        this.suspendedHistorytableData = data.result.data
        var tableid = 'suspend-history';
      } else {
        this.suspendedHistorytableData = []
      }
      error => {
      }
    })
  }

  changeDateFormat1(event, frmControlName, formName) {
    if (event.reason == 2 && event.value != null && event.value != '') {
      var obj = this.changeDateFormatService.changeDateFormat(event);
      var self = this
      if (obj == null) {
        self[formName].controls[frmControlName].setErrors({
          "dateNotValid": true
        });
        return;
      }
      this.dateNameArray[frmControlName] = {
        year: obj.date.year,
        month: obj.date.month,
        day: obj.date.day
      };
    }
  }

  submitSuspended() {
    this.changeDateFormatService.convertDateObjectToString(this.companySuspendedForm.value.suspendOn);
    this.changeDateFormatService.convertDateObjectToString(this.companySuspendedForm.value.resumeOn);
    var obj = {};
    obj['coKey'] = this.companyId;
    obj['resumeOn'] = this.changeDateFormatService.convertDateObjectToString(this.companySuspendedForm.value.resumeOn);
    obj['suspendOn'] = this.changeDateFormatService.convertDateObjectToString(this.companySuspendedForm.value.suspendOn);
    if (this.companySuspendedForm.valid) {
      this.companySetupForm.patchValue({ check: true });
      var suspendDateInstring = this.changeDateFormatService.convertDateObjectToString(this.companySuspendedForm.value.suspendOn);
      var isSuspendFutureDate = this.changeDateFormatService.isFutureDate(suspendDateInstring)
      if (this.companySuspendedForm.value.resumeOn) {
        var resumedDateInstring = this.changeDateFormatService.convertDateObjectToString(this.companySuspendedForm.value.resumeOn);
        var isresumedFutureDate = this.changeDateFormatService.isFutureDate(resumedDateInstring)
      }
      this.hmsDataServiceService.postApi(CompanyApi.saveCompanySuspendUrl,
        obj).subscribe(data => {
          if (data.code == 200 && data.status == "OK" && data.hmsShortMessage == "RECORD_SAVE_SUCCESSFULLY") {
            var URL = CompanyApi.getCompanyDetailByIdUrl;
            let coKey = { 'coKey': this.companyId };
            this.hmsDataServiceService.post(URL, coKey).subscribe(data => {
              if (data.code == 200 && data.status === "OK") {
                this.hideButton = { 'hideSuspendedButton': data.result.coSuspendHistory, 'hideAdjButton': data.result.coAdjustedPapAmtHistory, 'hidePapButton': data.result.coStandardPapAmtHistory, 'hideAdminRateButton': data.result.adminRateHist };
                this.companyService.hideButtons.emit(this.hideButton)
                $("#closeSuspendedhistory").trigger('click')
                this.toastr.success(this.translate.instant('company.toaster.company_suspended'));
              }
            })
            var suspend_company_url = CompanyApi.getSuspendCompanyList;
            var suspendTableID = "suspend_company";
            var reqParam = [{ 'key': 'coKey', 'value': this.companyId }]
            this.dataTableService.jqueryDataTableReload(suspendTableID, suspend_company_url, reqParam);
            this.companySuspendedForm.reset();
            if (isSuspendFutureDate) {
              this.isCompanySuspended = false
            } else {
              if (this.companySuspendedForm.value.resumeOn) {
                if (isresumedFutureDate) {
                  this.isCompanySuspended = true
                } else {
                  this.isCompanySuspended = false
                }
              } else {
                this.isCompanySuspended = true
              }
            }
            if (this.isCompanySuspended) {
              this.companyService.setCompanyStatus('Suspended')
            }
          } else if (data.code == 400 && data.status == "BAD_REQUEST" && data.hmsShortMessage == 'DATE_SHOULD_BE_GREATER_NOW_DATE') {
            this.toastr.error(this.translate.instant('company.toaster.suspensionDateLessThanCurrent'));
            $("#closeSuspendedhistory").trigger('click')
          } else if (data.code == 400 && data.status == "BAD_REQUEST" && data.hmsShortMessage == 'COMPANY_SUSPEND_DATE_SHOULD_BE_GREATER_THAN_COMPANY_EFFECTIVE_DATE') {
            this.toastr.error(this.translate.instant('company.toaster.companySuspendGreaterThanEffective'));
          } else if (data.code == 400 && data.status == "BAD_REQUEST" && data.hmsShortMessage == 'COMPANY_ALREADY_SUSPENDED') {
            this.toastr.error(this.translate.instant('company.toaster.companyAlreadySuspended'));
            $("#closeSuspendedhistory").trigger('click')
          }
        });
    } else {
      this.companySetupForm.patchValue({ check: false });
      this.validateAllFormFields(this.companySuspendedForm);
    }
  }

  convert(str) {
    var date = new Date(str),
      mnth = ("0" + (date.getMonth() + 1)).slice(-2),
      day = ("0" + date.getDate()).slice(-2);
    return [day, mnth, date.getFullYear()].join("/");
  }

  reset() {
    if (this.companySuspendedForm.invalid) {
      this.companySetupForm.patchValue({ check: false });
      this.companySuspendedForm.reset(this.companySuspendedForm);
    } else {
      this.companySuspendedForm.value;
      this.companySetupForm.patchValue({ check: true });
    }
  }

  /**
   * Get Suspended History List
   */
  getSuspendHistory() {
    var suspendedTableId = "suspended_company"
    var suspended_company_url = CompanyApi.getSuspendCompanyList;
    var reqParamSus = [{ 'key': 'coKey', 'value': this.companyId }]
    if (!$.fn.dataTable.isDataTable('#suspended_company')) {
      this.dataTableService.jqueryDataTable(suspendedTableId, suspended_company_url, 'full_numbers', this.suspended_History_company_columns, 5, true, true, 'lt', 'irp', undefined, [0, 'asc'], '', reqParamSus, '', undefined, [0], '', '', '', [1])
    } else {
      this.dataTableService.jqueryDataTableReload(suspendedTableId, suspended_company_url, reqParamSus);
    }
  }

  /**
   * Get Business Type List
   * @param value 
   */
  getBussinessType(value) {
    if (value == 1) {
      this.companyService.getbussinessType.emit(value)
    } else {
      this.companyService.getbussinessType.emit(value)
    }
  }

  /**
   * Patch Suspended History from value while edit
   */
  setSuspendedValues() {
    this.resumeTrue = true;
    let requiredInfo = {
      "coSuspendKey": this.coSuspendId
    }
    this.hmsDataServiceService.post(CompanyApi.companySuspendDetail, requiredInfo).subscribe(data => {
      if (data.code == 200 && data.status == "OK") {
        this.suspendedHistorytableData = data.result
        var suspDate = this.changeDateFormatService.convertStringDateToObject(this.suspendedHistorytableData.suspendOn)
        var resmDate = this.changeDateFormatService.convertStringDateToObject(this.suspendedHistorytableData.resumeOn)

        this.suspendDisableDate = this.suspendedHistorytableData.suspendOn;
        var currentDateCheck = this.changeDateFormatService.getToday();

        if (this.suspendedHistorytableData.resumeOn) {
          this.companySuspendedForm.setValue({
            suspendOn: this.changeDateFormatService.convertStringDateToObject(this.suspendedHistorytableData.suspendOn),
            resumeOn: this.changeDateFormatService.convertStringDateToObject(this.suspendedHistorytableData.resumeOn),
            coKey: this.companyId
          });
        } else {
          this.error = this.changeDateFormatService.compareTwoDates(currentDateCheck, suspDate.date);
          if (this.error.isError == false) {
            // GET THE MONTH AND YEAR OF THE SELECTED DATE.
            var month = suspDate.date.month;
            var year = suspDate.date.year;
            var newResumeDate = new Date(year, month, 1);
            var dateValue = this.changeDateFormatService.convertStringDateToObject(this.convert(newResumeDate));
            this.companySuspendedForm.patchValue({
              resumeOn: {
                date: {
                  year: dateValue.date.year,
                  month: dateValue.date.month,
                  day: dateValue.date.day
                }
              },
              suspendOn: this.changeDateFormatService.convertStringDateToObject(this.suspendedHistorytableData.suspendOn)
            });
          } else {
            var month = currentDateCheck.date.month;
            var year = currentDateCheck.date.year;
            var newResumeDate = new Date(year, month, 1);
            var dateValue = this.changeDateFormatService.convertStringDateToObject(this.convert(newResumeDate));
            this.companySuspendedForm.patchValue({
              resumeOn: {
                date: {
                  year: dateValue.date.year,
                  month: dateValue.date.month,
                  day: dateValue.date.day
                }
              },
              suspendOn: this.changeDateFormatService.convertStringDateToObject(this.suspendedHistorytableData.suspendOn)
            });
          }
        }
      } else {
        this.suspendedHistorytableData = []
      }
      error => {
      }
    })
    this.companySuspendedForm.controls['suspendOn'].disable();
  }

  updateResume() {
    if (this.companySuspendedForm.value.resumeOn) {
      let requiredInfo = {
        "coSuspendKey": this.coSuspendId,
        "resumeOn": this.changeDateFormatService.convertDateObjectToString(this.companySuspendedForm.value.resumeOn)
      }
      var resumedDateString = this.changeDateFormatService.convertDateObjectToString(this.companySuspendedForm.value.resumeOn);
      var resumedDate = this.changeDateFormatService.isFutureDate(resumedDateString)
      var suspendDate = this.changeDateFormatService.isFutureDate(this.suspendDisableDate)
      this.hmsDataServiceService.post(CompanyApi.resumeSuspend, requiredInfo).subscribe(data => {
        if (data.code == 200 && data.status == "OK" && data.hmsMessage.messageShort == "RECORD_UPDATED_SUCCESSFULLY") {
          this.toastr.success(this.translate.instant('company.toaster.company_resumed'));
          this.suspendedHistorytableData = data.result
          var suspend_company_url = CompanyApi.getSuspendCompanyList;
          var suspendTableID = "suspend_company";
          var reqParam = [{ 'key': 'coKey', 'value': this.companyId }]
          this.dataTableService.jqueryDataTableReload(suspendTableID, suspend_company_url, reqParam);
          if (resumedDate) {
            if (suspendDate) {
              this.isCompanySuspended = false
            } else {
              this.isCompanySuspended = true
            }
          } else {
            this.isCompanySuspended = false
          }
          if (this.isCompanySuspended) {
            this.companyService.setCompanyStatus('Suspended')
          } else {
            this.companyService.setCompanyStatus('Active') // Updated by Deepika Mam
          }
          this.companySuspendedForm.controls['suspendOn'].enable();
          this.companySuspendedForm.reset();
          this.resumeTrue = false
        } else {
          this.suspendedHistorytableData = []
        }
        error => {
        }
      })
    } else {
      this.toastr.error(this.translate.instant('company.toaster.fillResumeDate'));
    }
  }

  /**
   * Reset Company Suspended form
   */
  resetCompanySuspendedForm() {
    var tableActions = [
      { 'name': 'edit', 'class': 'table-action-btn edit-ico', 'icon_class': 'fa fa-pencil', 'showAction': this.mainCompanyArray[0].editSuspendCompany },
    ]
    var suspend_company_url = CompanyApi.getSuspendCompanyList;
    var suspendTableID = "suspend_company";
    var reqParam = [{ 'key': 'coKey', 'value': this.companyId }]

    if (!$.fn.dataTable.isDataTable('#suspend_company')) {
      this.dataTableService.jqueryDataTable(suspendTableID, suspend_company_url, 'full_numbers', this.suspended_company_columns, 5, true, true, 'lt', 'irp', undefined, [0, 'asc'], '', reqParam, tableActions, 2, [0], '', '', '', [1])
    } else {
      this.dataTableService.jqueryDataTableReload(suspendTableID, suspend_company_url, reqParam);
    }
    this.companySuspendedForm.reset();
    this.companySuspendedForm.controls['suspendOn'].enable();
    this.resumeTrue = false
  }

  /**
   * Auto Generate Company Number
   */
  autoGenerateCompanyNumber() {
    var URL = CompanyApi.autoGenerateCompanyNumberUrl;
    this.hmsDataServiceService.get(URL).subscribe(data => {
      if (data.code == 200 && data.status == "OK") {
        this.autoGeneratedNumber = data.result;
        this.companySetupForm.patchValue({ company: data.result });
        this.companySetupForm.patchValue({ autoGeneratedNumber: data.result });
      }
    });
  }

  onBlur() { } // add method for solve the errors of production-build

  getToolTipOnCompName() {
    if (this.companySetupForm.value.companyName != "" && this.companySetupForm.value.companyName != undefined) {
      $(document).on('mouseover', '#companyName', function () {
        var val = $(this).val().toString()
        if (val != "") {
          $(this).attr('title', val);
        }
      })
    } else {
      $(document).on('mouseover', '#companyName', function () {
        $(this).removeAttr('title');
      })
    }
  }

}
